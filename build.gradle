buildscript {
    repositories {
        gradlePluginPortal()
        maven { url 'https://repo.spring.io/milestone' }
    }

    ext {
        // Dependencies
        springBootVersion = '3.0.0'
        springdocVersion = '2.0.0'
        liquibaseVersion = '4.17.2'
        postgresqlVersion = '42.5.1'
        testContainersPostgresqlVersion = '1.17.6'
        passayVersion = '1.6.2'
        jsonwebtokenVersion = '0.11.5'
        lombokVersion = '1.18.24'
        greenMailVersion = '2.0.0-alpha-3'

        // Plugins
        springDependencyManagementVersion = '1.1.0'
        checkstyleVersion = '10.3.4'
        pmdVersion = '6.50.0'
        spotbugsVersion = '5.0.13'
        gatlingVersion = '3.8.4'
    }

    dependencies {
        // Plugins
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyManagementVersion}"
        classpath "com.github.spotbugs.snom:spotbugs-gradle-plugin:${spotbugsVersion}"
        classpath "gradle.plugin.io.gatling.gradle:gatling-gradle-plugin:${gatlingVersion}"
    }
}

ext {
    javaProjects = [project(':app')]
}

configure(javaProjects) {

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'

    group 'com.everkeep'
    version '1.0-SNAPSHOT'

    dependencyManagement {
        dependencies {
            // Database
            dependency "org.liquibase:liquibase-core:${liquibaseVersion}"
            dependency "org.postgresql:postgresql:${postgresqlVersion}"

            // Utilities
            dependency "org.projectlombok:lombok:${lombokVersion}"
            dependency "org.springdoc:springdoc-openapi-starter-webmvc-api:${springdocVersion}"
            dependency "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
            dependency "org.passay:passay:${passayVersion}"
            dependency "io.jsonwebtoken:jjwt-api:${jsonwebtokenVersion}"
            dependency "io.jsonwebtoken:jjwt-impl:${jsonwebtokenVersion}"
            dependency "io.jsonwebtoken:jjwt-jackson:${jsonwebtokenVersion}"

            // Test
            dependency "org.testcontainers:postgresql:${testContainersPostgresqlVersion}"
            dependency "com.icegreen:greenmail-junit5:${greenMailVersion}"
            dependency "io.gatling.highcharts:gatling-charts-highcharts:${gatlingVersion}"
        }

        repositories {
            mavenCentral()
            maven { url 'https://repo.spring.io/milestone' }
        }
    }

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    checkstyle {
        toolVersion = checkstyleVersion
        ignoreFailures = false
    }

    spotbugs {
        excludeFilter = file("../config/spotbugs/spotbugs-exclude.xml")
    }

    pmd {
        consoleOutput = true
        toolVersion = pmdVersion
        ruleSets = ["config/pmd/pmd.xml"]
    }

    test {
        useJUnitPlatform()
    }

    jacoco {
        toolVersion = '0.8.8'
    }

    def jacocoExclude = [
            '**/annotation/*',
            '**/config/*',
            '**/exception/*',
            '**/model/*',
            '**/repository/*',
            '**/dto/*',
            '**/Application.java',
    ]

    jacocoTestReport {
        dependsOn test

        reports {
            csv.enabled true
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: jacocoExclude)
            }))
        }
    }

    jacocoTestCoverageVerification {
        dependsOn jacocoTestReport

        afterEvaluate {
            getClassDirectories().setFrom(classDirectories.files.collect {
                fileTree(dir: it, exclude: jacocoExclude)
            })
        }

        violationRules {
            rule {
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.8
                }
            }
        }
    }

    check.dependsOn jacocoTestCoverageVerification
}
