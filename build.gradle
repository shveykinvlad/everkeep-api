buildscript {
    repositories {
        gradlePluginPortal()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyManagementVersion}"
        classpath "gradle.plugin.org.flywaydb:gradle-plugin-publishing:${flywayVersion}"
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:${spotbugsVersion}"
    }
}

configure(subprojects) {

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'jacoco'

    group 'com.evernote'
    version '1.0-SNAPSHOT'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }

        dependencies {
            dependency "org.mapstruct:mapstruct:${mapstructVersion}"
            dependency "org.mapstruct:mapstruct-processor:${mapstructVersion}"
            dependency "org.projectlombok:lombok:${lombokVersion}"
            dependency "org.testcontainers:postgresql:${testContainersPostgresqlVersion}"
            dependency "org.flywaydb:flyway-core:${flywayVersion}"
            dependency "org.springdoc:springdoc-openapi-ui:${springdocVersion}"
            dependency "org.passay:passay:${passayVersion}"
            dependency "io.jsonwebtoken:jjwt-api:${jsonwebtokenVersion}"
            dependency "io.jsonwebtoken:jjwt-impl:${jsonwebtokenVersion}"
            dependency "io.jsonwebtoken:jjwt-jackson:${jsonwebtokenVersion}"
        }

        repositories {
            mavenCentral()
        }
    }

    sourceCompatibility = JavaVersion.VERSION_14
    targetCompatibility = JavaVersion.VERSION_14

    checkstyle {
        toolVersion = '8.36'
        ignoreFailures = false
    }

    spotbugs {
        excludeFilter = file('../config/spotbugs/spotbugs-exclude.xml')
    }

    test {
        useJUnitPlatform()
    }

    jacoco {
        toolVersion = '0.8.5'
    }

    def jacocoExclude = [
            'com/everkeep/config/mapper/*',
    ]

    jacocoTestCoverageVerification {
        afterEvaluate {
            getClassDirectories().setFrom(classDirectories.files.collect {
                fileTree(dir: it, exclude: jacocoExclude)
            })
        }

        violationRules {
            rule {
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.8
                }
            }
        }
    }

    jacocoTestReport {
        afterEvaluate {
            getClassDirectories().setFrom(classDirectories.files.collect {
                fileTree(dir: it, exclude: jacocoExclude)
            })
        }
    }

    jacocoTestCoverageVerification.dependsOn jacocoTestReport
    check.dependsOn jacocoTestCoverageVerification
}
